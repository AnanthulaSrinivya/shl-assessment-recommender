# -*- coding: utf-8 -*-
"""SHL_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1maUAw_-IgAip_bc9wpfVODVrVIngRQJb
"""

# Step 1: Sample SHL product catalog
import pandas as pd

# You can also load this from a CSV or JSON file
catalog = pd.DataFrame([
    {
        "name": "Verify G+",
        "category": "Cognitive Ability",
        "tags": ["aptitude", "reasoning", "problem-solving"],
        "suitable_for": ["Entry", "Mid", "Senior"],
        "use_case": ["Hiring"]
    },
    {
        "name": "OPQ32",
        "category": "Personality",
        "tags": ["leadership", "teamwork", "motivation"],
        "suitable_for": ["Mid", "Senior"],
        "use_case": ["Hiring", "Development"]
    },
    {
        "name": "Sales Simulation",
        "category": "Simulation",
        "tags": ["sales", "persuasion", "customer service"],
        "suitable_for": ["Entry", "Mid"],
        "use_case": ["Hiring"]
    },
    {
        "name": "Excel Test",
        "category": "Skills",
        "tags": ["excel", "office", "data"],
        "suitable_for": ["Entry", "Mid"],
        "use_case": ["Hiring"]
    }
])

# Step 2: Input from user
input_job = {
    "job_title": "Sales Executive",
    "level": "Entry",
    "use_case": "Hiring",
    "key_skills": ["communication", "persuasion", "customer service"]
}

# Step 3: Matching logic
def recommend_assessments(input_job, catalog):
    results = []

    for _, row in catalog.iterrows():
        score = 0

        if input_job["level"] in row["suitable_for"]:
            score += 1

        if input_job["use_case"] in row["use_case"]:
            score += 1

        skill_matches = len(set(input_job["key_skills"]) & set(row["tags"]))
        score += skill_matches

        if score > 0:
            results.append({
                "name": row["name"],
                "category": row["category"],
                "score": score,
                "reason": f"Matched {skill_matches} skills + level/use_case"
            })

    sorted_results = sorted(results, key=lambda x: x["score"], reverse=True)
    return sorted_results

# Step 4: Get and display recommendations
recommendations = recommend_assessments(input_job, catalog)

for rec in recommendations:
    print(f"- {rec['name']} ({rec['category']}) â€” {rec['reason']}")

import matplotlib.pyplot as plt

top = pd.DataFrame(recommendations[:5])
plt.barh(top['name'], top['score'], color='skyblue')
plt.xlabel('Matching Score')
plt.title('Top SHL Assessment Recommendations')
plt.gca().invert_yaxis()
plt.show()

